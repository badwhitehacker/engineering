import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// ⚠️ Large list of blocked IPs and CIDR ranges
const BLOCKED_IPS = new Set([
  "5.54.68.206",
  "17.149.224.99",
  "17.149.226.186",
  "17.199.79.180",
  "54.197.81.106",
  "64.71.195.31",
  "65.17.253.220",
  "66.166.75.114",
  "66.65.156.74",
  "68.168.131.216",
  "69.20.70.31",
  "69.163.205.29",
  "74.125.182.36",
  "74.125.183.23",
  "74.208.16.68",
  "81.218.48.5",
  "84.14.214.213",
  "91.199.104.3",
  "109.11.101.21",
  "125.14.226.143",
  "128.242.99.72",
  "128.242.99.77",
  "133.11.204.68",
  "144.214.37.229",
  "149.20.54.136",
  "149.20.54.209",
  "149.20.54.227",
  "149.20.54.228",
  "149.20.57.227",
  "174.123.110.53",
  "178.167.254.110",
  "219.117.238.174",
])

// CIDR ranges (for broader blocks)
const BLOCKED_CIDRS = [
  "8.8.4.0/24",
  "8.8.8.0/24",
  "8.34.208.0/20",
  "8.35.192.0/20",
  "8.228.0.0/14",
  "8.232.0.0/14",
  "8.236.0.0/15",
  "23.236.48.0/20",
  "23.251.128.0/19",
  "34.0.0.0/15",
  "34.2.0.0/16",
  "34.3.0.0/23",
  "34.3.3.0/24",
  "34.3.4.0/24",
  "34.3.8.0/21",
  "34.3.16.0/20",
  "34.3.32.0/19",
  "34.3.64.0/18",
  "34.4.0.0/14",
  "34.8.0.0/13",
  "34.16.0.0/12",
  "34.32.0.0/11",
  "34.64.0.0/10",
  "34.128.0.0/10",
  "35.184.0.0/13",
  "35.192.0.0/14",
  "35.196.0.0/15",
  "35.198.0.0/16",
  "35.199.0.0/17",
  "35.199.128.0/18",
  "35.200.0.0/13",
  "35.208.0.0/12",
  "35.224.0.0/12",
  "35.240.0.0/13",
  "35.252.0.0/14",
  "64.15.112.0/20",
  "64.71.0.0/16",
  "64.233.160.0/19",
  "66.77.136.0/24",
  "66.102.0.0/20",
  "66.135.0.0/16",
  "66.150.0.0/16",
  "66.150.14.0/24",
  "66.211.0.0/16",
  "66.226.0.0/16",
  "66.227.16.0/24",
  "66.249.0.0/16",
  "66.249.64.0/19",
  "69.63.176.0/20",
  "69.63.189.0/24",
  "69.171.0.0/16",
  "70.32.128.0/19",
  "72.14.192.0/18",
  "74.114.24.0/21",
  "74.125.0.0/16",
  "79.182.0.0/16",
  "84.110.0.0/16",
  "91.199.104.0/24",
  "104.154.0.0/15",
  "104.196.0.0/14",
  "104.237.160.0/19",
  "107.167.160.0/19",
  "107.178.192.0/18",
  "108.59.80.0/20",
  "108.62.0.0/16",
  "108.170.192.0/18",
  "108.177.0.0/17",
  "115.160.0.0/16",
  "130.211.0.0/16",
  "136.22.2.0/23",
  "136.22.4.0/23",
  "136.22.8.0/22",
  "136.22.160.0/20",
  "136.22.176.0/21",
  "136.22.184.0/23",
  "136.22.186.0/24",
  "136.23.48.0/20",
  "136.23.64.0/18",
  "136.64.0.0/11",
  "136.107.0.0/16",
  "136.108.0.0/14",
  "136.112.0.0/13",
  "136.120.0.0/22",
  "136.124.0.0/15",
  "142.250.0.0/15",
  "146.148.0.0/17",
  "149.20.0.0/16",
  "162.120.128.0/17",
  "162.216.148.0/22",
  "162.222.176.0/21",
  "172.110.32.0/21",
  "172.217.0.0/16",
  "172.253.0.0/16",
  "173.194.0.0/16",
  "173.255.112.0/20",
  "174.122.0.0/16",
  "178.25.0.0/16",
  "192.104.160.0/23",
  "192.158.28.0/22",
  "192.178.0.0/15",
  "193.186.4.0/24",
  "195.214.0.0/16",
  "199.36.154.0/23",
  "199.36.156.0/24",
  "199.192.112.0/22",
  "199.223.232.0/21",
  "207.175.0.0/16",
  "207.223.160.0/20",
  "208.65.152.0/22",
  "208.68.108.0/22",
  "208.81.188.0/22",
  "208.117.224.0/19",
  "209.85.128.0/17",
  "209.85.224.0/24",
  "209.85.255.0/24",
  "209.235.0.0/16",
  "210.247.0.0/16",
  "216.58.192.0/19",
  "216.73.80.0/20",
  "216.239.32.0/19",
  "216.252.220.0/22",
])

function ipToLong(ip: string): number {
  return ip.split('.').reduce((acc, octet) => (acc << 8) + parseInt(octet), 0) >>> 0
}

function isInCidr(ip: string, cidr: string): boolean {
  const [range, bits = '32'] = cidr.split('/')
  const mask = ~(2 ** (32 - +bits) - 1)
  return (ipToLong(ip) & mask) === (ipToLong(range) & mask)
}

export function middleware(req: NextRequest) {
  const ip =
    req.ip ??
    req.headers.get('x-forwarded-for')?.split(',')[0].trim() ??
    ''

  if (!ip) return NextResponse.next()

  // Exact IP match
  if (BLOCKED_IPS.has(ip)) {
    return new NextResponse('Access Denied', { status: 403 })
  }

  // CIDR match
  if (BLOCKED_CIDRS.some((cidr) => isInCidr(ip, cidr))) {
    return new NextResponse('Access Denied', { status: 403 })
  }

  return NextResponse.next()
}

export const config = {
  matcher: '/:path*',
}
